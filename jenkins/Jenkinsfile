pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "yii2app"
        DOCKERHUB_USERNAME = "pandu321"
        EC2_USER = "ubuntu"
        EC2_IP = "13.60.76.230"
        SERVICE_NAME = "yii2_service"
        HOST_PORT = "8080"
        CONTAINER_PORT = "9090"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:latest ./app"
            }
        }

        stage('Login & Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                            docker push ${DOCKER_USER}/${DOCKER_IMAGE}:latest
                        """
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-ssh-key', keyFileVariable: 'SSH_KEY_FILE')]) {
                    script {
                        def checkService = sh (
                            script: "ssh -o StrictHostKeyChecking=no -i $SSH_KEY_FILE ${EC2_USER}@${EC2_IP} docker service ls --filter name=${SERVICE_NAME} -q",
                            returnStdout: true
                        ).trim()

                        if (checkService) {
                            echo "Service exists, updating image only..."
                            sh """
                                ssh -o StrictHostKeyChecking=no -i "$SSH_KEY_FILE" ${EC2_USER}@${EC2_IP} \\
                                "sudo docker service update --image ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:latest ${SERVICE_NAME}"
                            """
                        } else {
                            echo "Service does not exist, creating with port published..."
                            sh """
                                ssh -o StrictHostKeyChecking=no -i "$SSH_KEY_FILE" ${EC2_USER}@${EC2_IP} \\
                                "sudo docker service create --name ${SERVICE_NAME} --publish ${HOST_PORT}:${CONTAINER_PORT} ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:latest"
                            """
                        }
                    }
                }
            }
        }
    }
}
